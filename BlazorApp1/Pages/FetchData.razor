@page "/fetchdata"
@using BlazorApp1.Shared
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
@implements IDisposable
@inject HttpClient Http
@inject StaticPreRenderedComponentState ComponentState

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    private PersistingComponentStateSubscription subscription;

    private const string _PersistentStoreKey = "fetchdata";

    protected override async Task OnInitializedAsync()
    {
        subscription = ComponentState.RegisterOnPersisting(PersistForecasts);
        if (await ComponentState.TryTakeFromJsonAsync<WeatherForecast[]>(_PersistentStoreKey) is (true, var restored))
        {
            forecasts = restored!;
        }
        else
        {
            // Usually, the code below will run only when the app is running on pre-rendering server or development environment.
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("https://localhost:7078/api/weatherforecast");
        }
    }

    private Task PersistForecasts()
    {
        ComponentState.PersistAsJson(_PersistentStoreKey, forecasts);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        subscription.Dispose();
    }
}
